package es.alejandro12120.igor.commands;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import es.alejandro12120.igor.Igor;
import java.awt.Color;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Date;
import net.dv8tion.jda.core.EmbedBuilder;
import net.dv8tion.jda.core.events.message.guild.GuildMessageReceivedEvent;
import net.dv8tion.jda.core.hooks.ListenerAdapter;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

public class SearchItemCMD extends ListenerAdapter {

	@Override
	public void onGuildMessageReceived(GuildMessageReceivedEvent e) {
		String[] args = e.getMessage().getContentRaw().split("\\s+");
		if (args[0].equalsIgnoreCase(Igor.getIgor().prefix + "search") || args[0].equalsIgnoreCase(Igor.getIgor().prefix + "searchitem")) {
			if (args.length == 1) {
				e.getChannel().sendMessage("Usage: " + args[0] + " <item name>").queue();
			} else if (args.length >= 2) {
				try {
					StringBuilder sb = new StringBuilder();
					for (int i = 1; i < args.length; ++i) {
						sb.append(" ").append(args[i]);
					}
					String search = sb.toString().substring(1);
					JsonObject item = search(URLEncoder.encode(search, StandardCharsets.UTF_8.toString()));
					JsonObject images = item.get("images").getAsJsonObject();
					String price = item.get("price").getAsString();
					String coin = item.get("priceIcon").getAsString();

					EmbedBuilder embd = new EmbedBuilder();
					embd.setTitle(item.get("name").getAsString());
					embd.setDescription(item.get("description").getAsString());
					if (images.get("featured").getAsString().equalsIgnoreCase("false")) {
						if (images.get("png").getAsString().equalsIgnoreCase("false")) {
							images.get("icon").getAsString();
						} else {
							embd.setThumbnail(images.get("png").getAsString());
						}
					} else {
						embd.setThumbnail(images.get("featured").getAsString());
					}

					embd.addField("Type: ", "`" + item.get("readableType").getAsString() + "`", true);
					embd.addField("Price: ", price + " " + (coin.equalsIgnoreCase("vbucks") ? coin.substring(0, 2).toUpperCase() + coin.substring(2) : ""), true);
					embd.addField("Rarity: ", "`" + item.get("rarity").getAsString().substring(0, 1).toUpperCase() + item.get("rarity").getAsString().substring(1) + "`", false);

					embd.setColor(getRarityColor(item.get("rarity").getAsString().toLowerCase()));
					embd.setFooter("Generated by Igor.", Igor.jda.getSelfUser().getAvatarUrl());

					e.getMessage().getChannel().sendMessage(embd.build()).queue();
					embd.clear();
				} catch (Exception ex) {
					StringBuilder sb = new StringBuilder();
					for (int i = 1; i < args.length; ++i) {
						sb.append(" ").append(args[i]);
					}
					String search = sb.toString().substring(1);
					EmbedBuilder embd = new EmbedBuilder();
					embd.setTitle(":x: ERROR :x:");
					embd.setDescription("No search results found for '" + search + "'.");
					embd.setColor(0xff0000);

					e.getChannel().sendMessage(embd.build()).queue();
					ex.printStackTrace();
				}
			}
		}

		if (args[0].equalsIgnoreCase(Igor.getIgor().prefix+"searchcid") || args[0].equalsIgnoreCase(Igor.getIgor().prefix+"cid")) {
			if (args.length == 1) {
				e.getChannel().sendMessage("Usage: " + args[0] + " <CID to search> -> it return's a path.").queue();
			} else {
				StringBuilder sb = new StringBuilder();
				for (int i = 1; i < args.length; ++i) {
					sb.append(" ").append(args[i]);
				}
				String search = sb.toString().substring(1);
				try {
					URL url = new URL("http://benbotfn.tk:8080/api/searchFile?q="+search);
					URLConnection connection = url.openConnection();
					
					JsonParser jp = new JsonParser();
					JsonArray array = jp.parse(new InputStreamReader(connection.getInputStream())).getAsJsonArray();
					
					String description = "";
					EmbedBuilder embd = new EmbedBuilder();
					embd.setTitle("Paths for: `"+search+"`");
					for(int i = 0; i<array.size(); i++) {
						description = description +array.get(i).getAsString()+ "\n";
					}
					embd.setDescription(description);
					embd.setColor(572755);
					embd.setTimestamp(new Date().toInstant());
					e.getChannel().sendMessage(embd.build()).queue();
					
				}catch(Exception ex) {
					e.getChannel().sendMessage("No results found for: `"+search+"`.").queue();
				}
			}
		}
	}

	private JsonObject search(String tosearch) {
		try {
			String token = "90213c32-6025-41f8-8eec-6ad027dfe23d";
			DefaultHttpClient httpclient = new DefaultHttpClient();
			HttpGet httpGet = new HttpGet("https://fnbr.co/api/images?search=" + tosearch);
			httpGet.addHeader("x-api-key", token);

			HttpResponse response = httpclient.execute(httpGet);
			HttpEntity entity = response.getEntity();

			JsonParser jp = new JsonParser();
			JsonElement root = jp.parse(new InputStreamReader(entity.getContent()));
			JsonObject obj = root.getAsJsonObject();
			JsonArray data = obj.get("data").getAsJsonArray();
			return data.get(0).getAsJsonObject();
		} catch (IOException ex) {
			ex.printStackTrace();
			return null;
		}
	}

	private int getRarityColor(String rarity) {
		switch (rarity) {
			case "legendary": {
				return 0xffc100;
			}
			case "epic": {
				return 0xbf3cbf;
			}
			case "dark": {
				return 0xff42e7;
			}
			case "marvel": {
				return 0xff1f1f;
			}
			case "dc": {
				return 0x6094ce;
			}
			case "icon_series": {
				return 0x52e0e0;
			}
			case "rare": {
				return 0x00c5ff;
			}
			case "uncommon": {
				return 0x00e700;
			}
			case "common": {
				return 0xa5a5a5;
			}
			default: {
				return 0xa5a5a5;
			}
		}
	}

}
